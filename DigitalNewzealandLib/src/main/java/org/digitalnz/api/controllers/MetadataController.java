/*
 * DigitalNewzealandLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 06/29/2016
 */
package org.digitalnz.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;

import org.digitalnz.api.http.client.HttpClient;
import org.digitalnz.api.http.client.HttpContext;
import org.digitalnz.api.http.request.HttpRequest;
import org.digitalnz.api.http.response.HttpResponse;
import org.digitalnz.api.http.response.HttpStringResponse;
import org.digitalnz.api.http.client.APICallBack;
import org.digitalnz.api.*;
import org.digitalnz.api.models.*;

public class MetadataController extends BaseController {
    /**
     * Initialize the base controller using the given http client
     */
    public MetadataController() {
        super();
    }

    /**
     * Initialize the base controller using the given http client
     *
     * @param _client The given http client */
    public MetadataController(HttpClient _client) {
        super(_client);
    }

    /**
     * The Get Metadata API call returns the available metadata for a specific item. The Get Metadata v3 request parameters and response format differs significantly from the depreciated Get Metadata v1 & v2 API call.
     * @param    GetMetadataInput    Object with all parameters
	 * @return	Returns the CollectionSearchRecords response from the API call*/
    public void getMetadataAsync(
                final GetMetadataInput input,
            final APICallBack<CollectionSearchRecords> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/v3/records/{record_id}.json");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5160379949598927777L;
            {
                    put( "record_id", input.getRecordId() );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4730676241052106521L;
            {
                    put( "fields", input.getFields() );
                    put( "api_key", Configuration.getApiKey() );
            }});
        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5756234662010783513L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIException("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CollectionSearchRecords result = APIHelper.deserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CollectionSearchRecords>(){});

                            //let the caller know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(HttpContext context, Throwable error) {
                        //let the caller know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
}