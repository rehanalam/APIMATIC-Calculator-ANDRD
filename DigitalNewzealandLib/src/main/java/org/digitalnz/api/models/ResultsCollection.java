/*
 * DigitalNewzealandLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 06/29/2016
 */
package org.digitalnz.api.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class ResultsCollection 
        extends java.util.Observable
        implements java.io.Serializable {
    private static final long serialVersionUID = 5271685335178861080L;
    private String additionalDescription;
    private String author;
    private String category;
    private String collectionParent;
    private String collectionRoot;
    private String contentPartner;
    private String copyright;
    private Double date;
    private String dctype;
    private String description;
    private String displayCollection;
    private String displayDate;
    private String geoCoOrds;
    private String id;
    private boolean isCommercialUse;
    private String landingUrl;
    private String largeThumbnailUrl;
    private String libraryCollection;
    private String license;
    private int marsdenCode;
    private boolean noLandingPage;
    private String objectUrl;
    private boolean peerReviewed;
    private String publishedDate;
    private String publisher;
    private String rightsUrl;
    private String sourceUrl;
    private String syndicationDate;
    private String thumbnailUrl;
    private String title;
    /** GETTER
     * additional text describing the record
     */
    @JsonGetter("additional_description")
    public String getAdditionalDescription ( ) { 
        return this.additionalDescription;
    }
    
    /** SETTER
     * additional text describing the record
     */
    @JsonSetter("additional_description")
    public void setAdditionalDescription (String value) { 
        this.additionalDescription = value;
        notifyObservers(this.additionalDescription);
    }
 
    /** GETTER
     * lists the author's names
     */
    @JsonGetter("author")
    public String getAuthor ( ) { 
        return this.author;
    }
    
    /** SETTER
     * lists the author's names
     */
    @JsonSetter("author")
    public void setAuthor (String value) { 
        this.author = value;
        notifyObservers(this.author);
    }
 
    /** GETTER
     * a string containing one or more category names separated by a comma (e.g. Images, Web pages)
     */
    @JsonGetter("category")
    public String getCategory ( ) { 
        return this.category;
    }
    
    /** SETTER
     * a string containing one or more category names separated by a comma (e.g. Images, Web pages)
     */
    @JsonSetter("category")
    public void setCategory (String value) { 
        this.category = value;
        notifyObservers(this.category);
    }
 
    /** GETTER
     * the item's parent collection
     */
    @JsonGetter("collection_parent")
    public String getCollectionParent ( ) { 
        return this.collectionParent;
    }
    
    /** SETTER
     * the item's parent collection
     */
    @JsonSetter("collection_parent")
    public void setCollectionParent (String value) { 
        this.collectionParent = value;
        notifyObservers(this.collectionParent);
    }
 
    /** GETTER
     * the top level collection
     */
    @JsonGetter("collection_root")
    public String getCollectionRoot ( ) { 
        return this.collectionRoot;
    }
    
    /** SETTER
     * the top level collection
     */
    @JsonSetter("collection_root")
    public void setCollectionRoot (String value) { 
        this.collectionRoot = value;
        notifyObservers(this.collectionRoot);
    }
 
    /** GETTER
     * the institution holding the content to which the record refers
     */
    @JsonGetter("content_partner")
    public String getContentPartner ( ) { 
        return this.contentPartner;
    }
    
    /** SETTER
     * the institution holding the content to which the record refers
     */
    @JsonSetter("content_partner")
    public void setContentPartner (String value) { 
        this.contentPartner = value;
        notifyObservers(this.contentPartner);
    }
 
    /** GETTER
     * the copyright statement applying to the object. This field may be empty.
     */
    @JsonGetter("copyright")
    public String getCopyright ( ) { 
        return this.copyright;
    }
    
    /** SETTER
     * the copyright statement applying to the object. This field may be empty.
     */
    @JsonSetter("copyright")
    public void setCopyright (String value) { 
        this.copyright = value;
        notifyObservers(this.copyright);
    }
 
    /** GETTER
     * a date associated with the record (e.g. 1996-01-01T00:00:00.000Z). This field may be empty
     */
    @JsonGetter("date")
    public Double getDate ( ) { 
        return this.date;
    }
    
    /** SETTER
     * a date associated with the record (e.g. 1996-01-01T00:00:00.000Z). This field may be empty
     */
    @JsonSetter("date")
    public void setDate (Double value) { 
        this.date = value;
        notifyObservers(this.date);
    }
 
    /** GETTER
     *  Dublin Core categorisation indicating type
     */
    @JsonGetter("dctype")
    public String getDctype ( ) { 
        return this.dctype;
    }
    
    /** SETTER
     *  Dublin Core categorisation indicating type
     */
    @JsonSetter("dctype")
    public void setDctype (String value) { 
        this.dctype = value;
        notifyObservers(this.dctype);
    }
 
    /** GETTER
     * text describing the record
     */
    @JsonGetter("description")
    public String getDescription ( ) { 
        return this.description;
    }
    
    /** SETTER
     * text describing the record
     */
    @JsonSetter("description")
    public void setDescription (String value) { 
        this.description = value;
        notifyObservers(this.description);
    }
 
    /** GETTER
     * the display collection the item belongs to
     */
    @JsonGetter("display_collection")
    public String getDisplayCollection ( ) { 
        return this.displayCollection;
    }
    
    /** SETTER
     * the display collection the item belongs to
     */
    @JsonSetter("display_collection")
    public void setDisplayCollection (String value) { 
        this.displayCollection = value;
        notifyObservers(this.displayCollection);
    }
 
    /** GETTER
     * string with date information in multiple, often unstructured formats (e.g. Circa 2000)
     */
    @JsonGetter("display_date")
    public String getDisplayDate ( ) { 
        return this.displayDate;
    }
    
    /** SETTER
     * string with date information in multiple, often unstructured formats (e.g. Circa 2000)
     */
    @JsonSetter("display_date")
    public void setDisplayDate (String value) { 
        this.displayDate = value;
        notifyObservers(this.displayDate);
    }
 
    /** GETTER
     * The latitude and longitude in the following format: namespace:lat,long; Multiple values are seperated by semi-colons, for example: namespace:lat,long;namespace:lat,long;namespace:lat,long; NOTE: namespace is optional.
     */
    @JsonGetter("geo_co_ords")
    public String getGeoCoOrds ( ) { 
        return this.geoCoOrds;
    }
    
    /** SETTER
     * The latitude and longitude in the following format: namespace:lat,long; Multiple values are seperated by semi-colons, for example: namespace:lat,long;namespace:lat,long;namespace:lat,long; NOTE: namespace is optional.
     */
    @JsonSetter("geo_co_ords")
    public void setGeoCoOrds (String value) { 
        this.geoCoOrds = value;
        notifyObservers(this.geoCoOrds);
    }
 
    /** GETTER
     * the internal DigitalNZ identifier (used by the Get Metadata API)
     */
    @JsonGetter("id")
    public String getId ( ) { 
        return this.id;
    }
    
    /** SETTER
     * the internal DigitalNZ identifier (used by the Get Metadata API)
     */
    @JsonSetter("id")
    public void setId (String value) { 
        this.id = value;
        notifyObservers(this.id);
    }
 
    /** GETTER
     * this record is licensed for commercial use
     */
    @JsonGetter("is_commercial_use ")
    public boolean getIsCommercialUse ( ) { 
        return this.isCommercialUse;
    }
    
    /** SETTER
     * this record is licensed for commercial use
     */
    @JsonSetter("is_commercial_use ")
    public void setIsCommercialUse (boolean value) { 
        this.isCommercialUse = value;
        notifyObservers(this.isCommercialUse);
    }
 
    /** GETTER
     *  the url for the content on the contentpartner's website. Please use the source_url when providing HTML links (see below)
     */
    @JsonGetter("landing_url")
    public String getLandingUrl ( ) { 
        return this.landingUrl;
    }
    
    /** SETTER
     *  the url for the content on the contentpartner's website. Please use the source_url when providing HTML links (see below)
     */
    @JsonSetter("landing_url")
    public void setLandingUrl (String value) { 
        this.landingUrl = value;
        notifyObservers(this.landingUrl);
    }
 
    /** GETTER
     * a larger thumbnail image with dimensions up to 800px (NB the API Terms do not extend rights to the use of these thumbnails)
     */
    @JsonGetter("large_thumbnail_url")
    public String getLargeThumbnailUrl ( ) { 
        return this.largeThumbnailUrl;
    }
    
    /** SETTER
     * a larger thumbnail image with dimensions up to 800px (NB the API Terms do not extend rights to the use of these thumbnails)
     */
    @JsonSetter("large_thumbnail_url")
    public void setLargeThumbnailUrl (String value) { 
        this.largeThumbnailUrl = value;
        notifyObservers(this.largeThumbnailUrl);
    }
 
    /** GETTER
     * the library collection the item belongs to
     */
    @JsonGetter("library_collection")
    public String getLibraryCollection ( ) { 
        return this.libraryCollection;
    }
    
    /** SETTER
     * the library collection the item belongs to
     */
    @JsonSetter("library_collection")
    public void setLibraryCollection (String value) { 
        this.libraryCollection = value;
        notifyObservers(this.libraryCollection);
    }
 
    /** GETTER
     * the licence for the object. This field may be empty
     */
    @JsonGetter("license")
    public String getLicense ( ) { 
        return this.license;
    }
    
    /** SETTER
     * the licence for the object. This field may be empty
     */
    @JsonSetter("license")
    public void setLicense (String value) { 
        this.license = value;
        notifyObservers(this.license);
    }
 
    /** GETTER
     * a number indicating the field of research
     */
    @JsonGetter("marsden_code")
    public int getMarsdenCode ( ) { 
        return this.marsdenCode;
    }
    
    /** SETTER
     * a number indicating the field of research
     */
    @JsonSetter("marsden_code")
    public void setMarsdenCode (int value) { 
        this.marsdenCode = value;
        notifyObservers(this.marsdenCode);
    }
 
    /** GETTER
     * boolean value, if set to true it indicates the item doesn't have an external landing page, usually because it is a downloadable item such as a pdf or mpeg
     */
    @JsonGetter("no_landing_page")
    public boolean getNoLandingPage ( ) { 
        return this.noLandingPage;
    }
    
    /** SETTER
     * boolean value, if set to true it indicates the item doesn't have an external landing page, usually because it is a downloadable item such as a pdf or mpeg
     */
    @JsonSetter("no_landing_page")
    public void setNoLandingPage (boolean value) { 
        this.noLandingPage = value;
        notifyObservers(this.noLandingPage);
    }
 
    /** GETTER
     * a url pointing to a downloadable object, i.e. an image, pdf or mpeg
     */
    @JsonGetter("object_url")
    public String getObjectUrl ( ) { 
        return this.objectUrl;
    }
    
    /** SETTER
     * a url pointing to a downloadable object, i.e. an image, pdf or mpeg
     */
    @JsonSetter("object_url")
    public void setObjectUrl (String value) { 
        this.objectUrl = value;
        notifyObservers(this.objectUrl);
    }
 
    /** GETTER
     * boolean, associated with research paper items. True indicates the research paper has been peer reviewed
     */
    @JsonGetter("peer_reviewed")
    public boolean getPeerReviewed ( ) { 
        return this.peerReviewed;
    }
    
    /** SETTER
     * boolean, associated with research paper items. True indicates the research paper has been peer reviewed
     */
    @JsonSetter("peer_reviewed")
    public void setPeerReviewed (boolean value) { 
        this.peerReviewed = value;
        notifyObservers(this.peerReviewed);
    }
 
    /** GETTER
     * list of dates published 
     */
    @JsonGetter("published_date")
    public String getPublishedDate ( ) { 
        return this.publishedDate;
    }
    
    /** SETTER
     * list of dates published 
     */
    @JsonSetter("published_date")
    public void setPublishedDate (String value) { 
        this.publishedDate = value;
        notifyObservers(this.publishedDate);
    }
 
    /** GETTER
     * lists the publisher's names
     */
    @JsonGetter("publisher")
    public String getPublisher ( ) { 
        return this.publisher;
    }
    
    /** SETTER
     * lists the publisher's names
     */
    @JsonSetter("publisher")
    public void setPublisher (String value) { 
        this.publisher = value;
        notifyObservers(this.publisher);
    }
 
    /** GETTER
     * the url of the object licence. This field may be empty.
     */
    @JsonGetter("rights_url")
    public String getRightsUrl ( ) { 
        return this.rightsUrl;
    }
    
    /** SETTER
     * the url of the object licence. This field may be empty.
     */
    @JsonSetter("rights_url")
    public void setRightsUrl (String value) { 
        this.rightsUrl = value;
        notifyObservers(this.rightsUrl);
    }
 
    /** GETTER
     * the url that will redirect users to the landing_url. By using this link (as opposed to the display_url) we are able to count clickthroughs which is helpful for demonstrating the value of DigitalNZ
     */
    @JsonGetter("source_url")
    public String getSourceUrl ( ) { 
        return this.sourceUrl;
    }
    
    /** SETTER
     * the url that will redirect users to the landing_url. By using this link (as opposed to the display_url) we are able to count clickthroughs which is helpful for demonstrating the value of DigitalNZ
     */
    @JsonSetter("source_url")
    public void setSourceUrl (String value) { 
        this.sourceUrl = value;
        notifyObservers(this.sourceUrl);
    }
 
    /** GETTER
     * the date the record was added to DigitalNZ
     */
    @JsonGetter("syndication_date")
    public String getSyndicationDate ( ) { 
        return this.syndicationDate;
    }
    
    /** SETTER
     * the date the record was added to DigitalNZ
     */
    @JsonSetter("syndication_date")
    public void setSyndicationDate (String value) { 
        this.syndicationDate = value;
        notifyObservers(this.syndicationDate);
    }
 
    /** GETTER
     * the url of for a thumbnail image of the content to which the record refers. This field may be empty.
     */
    @JsonGetter("thumbnail_url")
    public String getThumbnailUrl ( ) { 
        return this.thumbnailUrl;
    }
    
    /** SETTER
     * the url of for a thumbnail image of the content to which the record refers. This field may be empty.
     */
    @JsonSetter("thumbnail_url")
    public void setThumbnailUrl (String value) { 
        this.thumbnailUrl = value;
        notifyObservers(this.thumbnailUrl);
    }
 
    /** GETTER
     * the title of the record
     */
    @JsonGetter("title")
    public String getTitle ( ) { 
        return this.title;
    }
    
    /** SETTER
     * the title of the record
     */
    @JsonSetter("title")
    public void setTitle (String value) { 
        this.title = value;
        notifyObservers(this.title);
    }
 
}
 