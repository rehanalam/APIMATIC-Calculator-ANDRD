/*
 * DigitalNewzealandLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 06/29/2016
 */
package org.digitalnz.api.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class SearchRecordInput 
        extends java.util.Observable
        implements java.io.Serializable {
    private static final long serialVersionUID = 4720898706584527270L;
    private String text;
    private String and;
    private String or;
    private String without;
    private Integer page = 1;
    private Integer perPage = 20;
    private String facets;
    private Integer facetsPage = 1;
    private Integer facetPerPage = 10;
    private String sort;
    private String direction;
    private Double geoBbox;
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("text")
    public String getText ( ) { 
        return this.text;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("text")
    public void setText (String value) { 
        this.text = value;
        notifyObservers(this.text);
    }
 
    /** GETTER
     * Restricts search to records matching all facet values. Example: "&and[content_partner][]=Kete+Horowhenua&and[category][]=Images"
     */
    @JsonGetter("and")
    public String getAnd ( ) { 
        return this.and;
    }
    
    /** SETTER
     * Restricts search to records matching all facet values. Example: "&and[content_partner][]=Kete+Horowhenua&and[category][]=Images"
     */
    @JsonSetter("and")
    public void setAnd (String value) { 
        this.and = value;
        notifyObservers(this.and);
    }
 
    /** GETTER
     * Restricts search to records matching any of the specified facet values. Example: "&or[category][]=Image&or[category][]=Videos"without 
     */
    @JsonGetter("or")
    public String getOr ( ) { 
        return this.or;
    }
    
    /** SETTER
     * Restricts search to records matching any of the specified facet values. Example: "&or[category][]=Image&or[category][]=Videos"without 
     */
    @JsonSetter("or")
    public void setOr (String value) { 
        this.or = value;
        notifyObservers(this.or);
    }
 
    /** GETTER
     * Restricts search to records that don't match any of the facet values. Example: "&without[category][]=Newspapers"
     */
    @JsonGetter("without")
    public String getWithout ( ) { 
        return this.without;
    }
    
    /** SETTER
     * Restricts search to records that don't match any of the facet values. Example: "&without[category][]=Newspapers"
     */
    @JsonSetter("without")
    public void setWithout (String value) { 
        this.without = value;
        notifyObservers(this.without);
    }
 
    /** GETTER
     * the page when iterating over a set of records. (Defaults to 1.)
     */
    @JsonGetter("page")
    public Integer getPage ( ) { 
        return this.page;
    }
    
    /** SETTER
     * the page when iterating over a set of records. (Defaults to 1.)
     */
    @JsonSetter("page")
    public void setPage (Integer value) { 
        this.page = value;
        notifyObservers(this.page);
    }
 
    /** GETTER
     * the number of records the user wishes returned up to a maximum of 100. (Defaults to 20.)
     */
    @JsonGetter("per_page")
    public Integer getPerPage ( ) { 
        return this.perPage;
    }
    
    /** SETTER
     * the number of records the user wishes returned up to a maximum of 100. (Defaults to 20.)
     */
    @JsonSetter("per_page")
    public void setPerPage (Integer value) { 
        this.perPage = value;
        notifyObservers(this.perPage);
    }
 
    /** GETTER
     * a list of facet fields to include in the output. See the note on facets below for more information. Example: "&facets=year,category"
     */
    @JsonGetter("facets")
    public String getFacets ( ) { 
        return this.facets;
    }
    
    /** SETTER
     * a list of facet fields to include in the output. See the note on facets below for more information. Example: "&facets=year,category"
     */
    @JsonSetter("facets")
    public void setFacets (String value) { 
        this.facets = value;
        notifyObservers(this.facets);
    }
 
    /** GETTER
     * the facet page to iterate over a set of facets. . (Defaults to 1.)
     */
    @JsonGetter("facets_page")
    public Integer getFacetsPage ( ) { 
        return this.facetsPage;
    }
    
    /** SETTER
     * the facet page to iterate over a set of facets. . (Defaults to 1.)
     */
    @JsonSetter("facets_page")
    public void setFacetsPage (Integer value) { 
        this.facetsPage = value;
        notifyObservers(this.facetsPage);
    }
 
    /** GETTER
     * the number of facets returned for every page. (Defaults to 10.)
     */
    @JsonGetter("facet_per_page")
    public Integer getFacetPerPage ( ) { 
        return this.facetPerPage;
    }
    
    /** SETTER
     * the number of facets returned for every page. (Defaults to 10.)
     */
    @JsonSetter("facet_per_page")
    public void setFacetPerPage (Integer value) { 
        this.facetPerPage = value;
        notifyObservers(this.facetPerPage);
    }
 
    /** GETTER
     * the field upon which results are sorted. Defaults to relevance sorting. The sort field must be one of: "category", "content_partner", "date", "syndication_date".
     */
    @JsonGetter("sort")
    public String getSort ( ) { 
        return this.sort;
    }
    
    /** SETTER
     * the field upon which results are sorted. Defaults to relevance sorting. The sort field must be one of: "category", "content_partner", "date", "syndication_date".
     */
    @JsonSetter("sort")
    public void setSort (String value) { 
        this.sort = value;
        notifyObservers(this.sort);
    }
 
    /** GETTER
     *  the direction in which the results are sorted. Possible values: "desc", "asc".
     */
    @JsonGetter("direction")
    public String getDirection ( ) { 
        return this.direction;
    }
    
    /** SETTER
     *  the direction in which the results are sorted. Possible values: "desc", "asc".
     */
    @JsonSetter("direction")
    public void setDirection (String value) { 
        this.direction = value;
        notifyObservers(this.direction);
    }
 
    /** GETTER
     * a geographic bounding box scoping a search to a geographic region. Order of latitude-longitude coordinates is north, west, south, east. For example, &geo_bbox=-41,174,-42,175 searches the Wellington region.
     */
    @JsonGetter("geo_bbox")
    public Double getGeoBbox ( ) { 
        return this.geoBbox;
    }
    
    /** SETTER
     * a geographic bounding box scoping a search to a geographic region. Order of latitude-longitude coordinates is north, west, south, east. For example, &geo_bbox=-41,174,-42,175 searches the Wellington region.
     */
    @JsonSetter("geo_bbox")
    public void setGeoBbox (Double value) { 
        this.geoBbox = value;
        notifyObservers(this.geoBbox);
    }
 
}
 